## 递归
```java
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode l = new ListNode(0);
        ListNode r = l;
        while (l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                r.next = l1;
                l1 = l1.next;
            }
            else {
                r.next = l2;
                l2 = l2.next;
            }
            r = r.next;
        }
        r.next = l1 != null ? l1 : l2;
        return l.next;
    }
}
```

## 迭代
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        }
        else if (l2 == null) {
            return l1;
        }
        if (l1.val < l2.val) {
            l1.next = mergeTwoLists(l1.next, l2);
            //递归里面 只看当前，不要去想后面怎么干 现在就l1 l2，l1 < l2 所以返回l1
            return l1;
        }
        else {
            l2.next = mergeTwoLists(l1, l2.next);
            return l2;
        }
    }
}
