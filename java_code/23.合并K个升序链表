方法一：分治 类似归并排序c
```
class Solution {
  public ListNode mergeKLists(ListNode[] lists) {
      if (list == null || list.length == 0) return null;
      return sort(lists, 0, lists.length - 1);
  }
  
  public ListNode sort(ListNode[] lists, int l, int r) {
      if (l == r) {
        return lists[l];
      }
      int mid = l + (r - l) / 2;
      return merge(sort(lists, l, mid), sort(lists, mid + 1, r));
  }
  
  public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
      ListNode dummy = new ListNode(0);
      ListNode tail = dummy;
      while (l1 != null && l2 != null) {
        if (l1.val < l2.val) {
            tail.next = l1;
            l1 = l1.next;
        } else {
            tail.next = l2;
            l2 = l2.next;
        }
        tail =tail.next;
      }
      tail.next = l1 == null ? l2 : l1;
      return dummy.next;
  }
}
```
方法二：迭代合并始终保持第一个 与 最后一个合并，合并后的又成为第一个，这样每合并一次就少一个链表，直到只有一个链表为止。
```
class Solution {
    public ListNode merge
}
```




